##############################################################################################################################
# Preliminary map for Smart Forests.
# Current features:
# >Map that allows selection of one point at a time; the point is highlighted on the map
# >Current conditions of that location are displayed, if the data is available for them.
# >Graphs of data from selected point are displayed, if data is available for them.
# Coming soon:
# >Multi-point selection?
# @author sjh1024
#
#######################################################################################################################################3
#Import the libraries required to run the application. "Leaflet" is the package that makes maps possible in R Shiny.
library(shiny)
library(leaflet)
library(dygraphs)
library(datasets)
library(xts)
#Load csv of coordinates and location names.
#Leaflet will use this data to initialize a map with circles @ each location
#and will reference it to keep a "selected" point to be used to display data.
locations<-read.csv("locations.csv")
#Load site data .csv's.
#Currently, there is a separate file for every "type" of data with columns corresponding to site names.
#It is important to change the "DateTime" columns to a time format that Shiny can use to create the "x" axis of its graphs, as shown in these examples.
temperature <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_temperature.csv",header=TRUE)
temperature$DateTime <- as.POSIXlt(temperature$DateTime,tz="America/New_York")
solrad <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_solrad.csv" ,header=TRUE)
solrad$DateTime <- as.POSIXlt(solrad$DateTime,tz="America/New_York")
soilt <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_soilt.csv" ,header=TRUE)
soilt$DateTime <- as.POSIXlt(soilt$DateTime,tz="America/New_York")


###################################################################################################################################################################################33
shinyApp(
  #UI part of Shiny application.
  ui <- fluidPage(
    #Sidebar Layout means that there will be a "main panel" and a "sidebar panel".
    #The main panel contains the map
    #The sidebar contains "current conditions"
    #The graphs will likely be placed in the main panel below the map/sidebar.
    sidebarLayout(
                  mainPanel(
                    #Need to put this in UI to make the map display. The map is named "mymap" and this name is needed to manipulate it in the server function.
                    leafletOutput("mymap"),
                    conditionalPanel(
                      condition = "output.hasData == 1",
                      tags$h4("No data available for this site.")
                    ),
                    conditionalPanel(
                      condition = "output.hasData == 2",
                      tags$h4("Select a Site")
                    ),
                    conditionalPanel(
                      condition = "output.hasData == 3", #Might do checkbox of graph displays. Change this to a different value then.
                      fluidRow(column(12,dygraphOutput("airTemperature", width = "100%", height = "300px"))),
                      fluidRow(column(10,offset=2,tags$div(id="atemp")))
                    ),
                    conditionalPanel(
                      condition = "output.hasData == 3", #Might do checkbox of graph displays. Change this to a different value then.
                      fluidRow(column(12,dygraphOutput("solarRadiation", width = "100%", height = "300px"))),
                      fluidRow(column(10,offset=2,tags$div(id="srad")))
                    ),
                    conditionalPanel(
                      condition = "output.hasData == 3", #Might do checkbox of graph displays. Change this to a different value then.
                      fluidRow(column(12,dygraphOutput("soilTemperature", width = "100%", height = "300px"))),
                      fluidRow(column(10,offset=2,tags$div(id="stemp")))
                    )
                    ),
                  sidebarPanel(
                    #The sidebar contains a title and some information on the currently selected point.
                    #"htmlOutput" allows lines of text with html to be assigned in the server function.
                    #They need to be assigned in the server function and not the UI because "select" 
                    #cannot be accessed in the UI part of the application.
                    #Use the names of each htmlOutput in your server function to assign them.
                    #
                    #Lines of text will appear in order as they appear in the UI function.
                    #
                    #The commented out htmlOutputs are data that might be good to display but are currently unavailable.
                    width = 3,
                    h2("Smart Forests Data Viewer"),
                    hr(),
                    tags$h4("Station Information"),
                    htmlOutput("siteName"),
                    htmlOutput("coords"),
                    #htmlOutput("elev"),
                    #htmlOutput("period_of_record"),
                    tags$h4("Latest Conditions"),
                    htmlOutput("time_date"),
                    htmlOutput("airtemp"),
                    #htmlOutput("rh"),
                    #htmlOutput("precip"),
                    htmlOutput("solar"),
                    #htmlOutput("wind"),
                    htmlOutput("soilt"),
                    hr(),
                    checkboxInput("showgrid", label = "Show Grid", value = TRUE)
                    )
         

                  )

),
################################################################################################################################################################################
server <- function(input, output, session) {
  #The selected point must be saved as a reactiveValues so it will save every time a change is made to the application (Clicking a point, moving a graph, etc.)
  #Right now, the initial selected value is a "null-like" value until I can figure out a more elegant way to handle this, or make one point be initially selected on the map itself.
  select <-reactiveValues("site" = as.character("Select a Site"), "lng" = as.numeric(NaN), "lat" = as.numeric(NaN), "short" = "INIT", "data" = "NA")
  #Initialize the map with all points. 
   output$mymap <-renderLeaflet ({
     leaflet() %>% 
       #Needed to show the "map" underneath the points
       addTiles() %>%
       #"Circles" are the points on the map. Initalizes them with the lats/longs in the Locations csv and the layerId as the Site in the locations csv. 
       addCircles(
                  data = locations,
                  radius = 10000, 
                  lat = as.numeric(locations$Latitude),
                  lng = as.numeric(locations$Longitude),
                  label = locations$Site,
                  fillColor = "mediumblue",
                  fillOpacity = 1,
                  color = "mediumblue",
                  weight = 5,
                  layerId = as.character(locations$Site),
                  highlightOptions = highlightOptions(color = "mediumseagreen",
                                                      opacity = 1.0,
                                                      weight = 5,
                                                      bringToFront = TRUE)) 
   
   })
   #Render the text output for the selected site's data.
   output$siteName <- renderText({
     paste("<b>Site:</b>", as.character(select$site))
   })
   output$coords <- renderText({
     paste("<b>Coordinates: </b>", "(", as.character(select$lat), ", ", as.character(select$lng), ")", sep = "")
   })
   #NOTE#
   #Reading data for the "current conditions" works as follows:
   #1. Read the csv again from the link, but this time, trim every row EXCEPT the last row.
   #2. This makes the column titles "V1-V10" instead of actual site names. Keep this in mind when updating the code.
   #**If something doesn't make sense, I suggest uncommenting the "print(td)" line to see what the data looks like.
   #3.Display the correct value based on graph type. The click event handler handles selecting the correct location.
   output$time_date <- renderText({
     td <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_temperature.csv",header=FALSE, skip=nrow(temperature))
     #print(td)
     paste("<b>Date/Time:</b>", as.character(td$V1))
   })
   output$airtemp <- renderText({
     tprature <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_temperature.csv",header=FALSE, skip=nrow(temperature))
     paste("<b>Air Temp: </b>", as.character(tprature$select$short), sep = "")
   })
   output$solar<- renderText({
     solr <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_solrad.csv",header=FALSE, skip=nrow(solrad))
     paste("<b>Solar Radiation:</b>", as.character(solr$select$short), sep = "")
   })
   output$soilt <- renderText({
     st <- read.csv("http://hbrsensor.sr.unh.edu/demo/graphs/sf_soilt.csv",header=FALSE, skip=nrow(soilt))
     paste("<b>Soil Temperature: </b>", as.character(soilt$select$short), sep = "")
   })
###########################################################################################################
   #GRAPH OUTPUTS
###########################################################################################################
   
   #Air Temperature Graph
   output$airTemperature<-renderDygraph({
     if(select$short != "NA" && select$short != "INIT")
     {
     t<- temperature[c(select$data)]
     y=xts(t, temperature$DateTime)
     dygraph(y, main=paste("Air Temperature"), group = "hubbard") %>%
       dyOptions(colors = RColorBrewer::brewer.pal(6, "Set2"))%>%
       dyOptions(drawGrid = input$showgrid) %>%
       dyAxis("y", label = "Temperature(F)") %>%
       dyLegend(labelsDiv='atemp') %>%
       dyRangeSelector(height = 40,dateWindow = input$dateRange)
     }
   })
   #Solar Radiation Graph
   output$solarRadiation<-renderDygraph({
     if(select$short!= "NA" && select$short != "INIT"){
     t<- solrad[c(select$data)]
     y=xts(t, solrad$DateTime)
     dygraph(y, main=paste("Solar Radiation"), group = "hubbard") %>%
       dyOptions(colors = RColorBrewer::brewer.pal(6, "Set2"))%>%
       dyOptions(drawGrid = input$showgrid) %>%
       dyAxis("y", label = "Intensity(W/m<sup>2</sup>)") %>%
       dyLegend(labelsDiv='srad') %>%
       dyRangeSelector(height = 40,dateWindow = input$dateRange)
     }
     
   })
   #Soil Temperature Graph
   output$soilTemperature<-renderDygraph({
     if(select$short != "NA" && select$short != "INIT"){
     t<- soilt[c(select$data)]
     y=xts(t, soilt$DateTime)
     dygraph(y, main=paste("Soil Temperature"), group = "hubbard") %>%
       dyOptions(colors = RColorBrewer::brewer.pal(6, "Set2"))%>%
       dyOptions(drawGrid = input$showgrid) %>%
       dyAxis("y", label = "Temperature(F)") %>%
       dyLegend(labelsDiv='stemp') %>%
       dyRangeSelector(height = 40,dateWindow = input$dateRange)
     }
   })
   
   
#Handles events where a circle-shaped point is clicked on a map. Changes colors of selected/deselected points.  
observeEvent(input$mymap_shape_click, {
#You need to use leafletProxy to alter a map that already has been initialized.
#You can only use it once, so you need to create a new one every time you alter one.
  
#First, clear all shapes on the map.
  proxy <- leafletProxy("mymap") 
 proxy %>% clearShapes() 
#Now, re-draw every "blue" deselected circle on the map.
 proxy <- leafletProxy("mymap") 
 proxy %>% addCircles(
   data = locations,
   radius = 10000, 
   lat = as.numeric(locations$Latitude),
   lng = as.numeric(locations$Longitude),
   label = locations$Site,
   fillColor = "mediumblue",
   fillOpacity = 1,
   color = "mediumblue",
   weight = 5,
   layerId = as.character(locations$Site),
   highlightOptions = highlightOptions(color = "mediumseagreen",
                                       opacity = 1.0,
                                       weight = 5,
                                       bringToFront = TRUE)) 
 #Finally, draw a red circle at the point the user has clicked.
  proxy <- leafletProxy("mymap") 
 proxy %>% addCircles(data = paste(as.character(input$mymap_shape_click$lat), as.character(input$mymap_shape_click$lng)),
                      radius = 10000,
                      lat = input$mymap_shape_click$lat,
                      lng = input$mymap_shape_click$lng,
                      fillColor = "red",
                      label = input$mymap_shape_click$id,
                      fillOpacity = 1,
                      color = "red",
                      weight = 5,
                      layerId = as.character(input$mymap_shape_click$id),
                      highlightOptions = highlightOptions(color = "mediumseagreen",
                                                          opacity = 1,
                                                          weight = 10,
                                                          bringToFront = TRUE))
#Change "select"'s values so that it contains the data of the selected point. 
#NOTE: "short" is the column title after the csv has been trimmed of all but the last lines. It'll be a value between V2 and V10.
#This translation is done so the csv can find the data corresponding to the correct location.
 select$site = input$mymap_shape_click$id
 select$lat = input$mymap_shape_click$lat
 select$lng =  input$mymap_shape_click$lng
 if(input$mymap_shape_click$id == "Fernow Experimental Forest"){
   select$short = "V2"
   select$data = "Fernow"
 }
 else if(input$mymap_shape_click$id == "Blackrock Forest"){
   select$short = "V9"
   select$data = "Blackrock"
 }
 else if(input$mymap_shape_click$id == "Hubbard Brook Experimental Forest (HBEF)"){
   select$short = "V6"
   select$data = "HubbardBrook"
 }
 else if(input$mymap_shape_click$id == "Marcell Experimental Forest (MEF)"){
   select$short = "V8"
   select$data = "Marcell"
 }
 else if(input$mymap_shape_click$id == "Silas Little Experimental Forest"){
   select$short = "V4"
   select$data = "SilasLittle"
 }
 else{
   select$short = "NA"
   select$data = "NA"
 }
#print(select$data)
  })

output$hasData <- reactive({
 if(select$short == "NA" ){ return(1) }
  else if( select$short == "INIT"){return(2)}
  else{ return(3) }
})
outputOptions(output, "hasData", suspendWhenHidden = FALSE)
}


)


